#!/bin/bash

# Shell style guide: https://google.github.io/styleguide/shell.xml

# ## (-) master and worker steps
# ## (*) worker specific steps
#
# - label nodes
# - disable scheduling
# - double ASG size
# - wait for 2x group
# - stop ASG actions
# - drain/terminate labelled nodes (sequentially)
# - resize ASG to original size
# - re-enable ASG actions

set -o errexit
set -o nounset
set -o pipefail

readonly retire_time=$(date +"%Y-%m-%dT%H-%M-%SZ")

# flags
kube_context=''
aws_profile=''
role=''
resume=''
timeout=300

usage() {
  cat <<EOF
Usage: $0 -c <kube_context> -p <aws_profile> -s [retire_time_label] -r [role]
        -t [timeout]

  -s    Resume node rolling. Argument is retire_time label. If set, -r [role]
        must also be set
  -t    Node drain timeout. How long to wait for the node to drain before
        shutting it down (in seconds, default 600s)
EOF
}

while getopts 'c:p:r:hs:t:' flag; do
  case "${flag}" in
    c) kube_context="${OPTARG}" ;;
    p) aws_profile="${OPTARG}" ;;
    r) role="${OPTARG}" ;;
    s) resume="${OPTARG}" ;;
    t) timeout="${OPTARG}" ;;
    h) usage && exit 0 ;;
    *) echo "Unexpected option: ${flag}" && usage && exit 1 ;;
  esac
done

### Deps
deps="
  jq
  kubectl
  aws
  timeout
  xargs
"

missing_deps=""
for d in ${deps}; do
  if ! command -v ${d} &> /dev/null; then
    missing_deps+="${d} "
  fi
done

if [[ -n "${missing_deps}" ]]; then
  echo "Missing dependencies: ${missing_deps}"
  exit 1
fi

###

### Validation
if [[ -z "${kube_context}" ]]; then
  usage
  exit 1
fi

if [[ -n "${resume}" ]] && [[ -z "${role}" ]] ; then
  echo "If you are resuming, you need to provide a role"
  usage
  exit 1
fi

aws_opts=""
if [[ -n "${aws_profile}" ]]; then
  if aws configure list --profile ${aws_profile} &> /dev/null; then
    aws_opts="--profile=${aws_profile}"
    aws ${aws_opts} iam get-user &>/dev/null || echo "failed to get iam user for ${aws_opts}"; exit 1
  else
    echo "Invalid profile: ${aws_profile}"
    exit 1
  fi
fi

function fail() {
  echo $1 >&2
  exit 1
}

function retry() {
  local n=1
  local max=12
  local delay=8
  while true; do
    "$@" && break || {
      if [[ $n -lt $max ]]; then
        ((n++))
        echo "command failed: attempt=$n max=$max"
        sleep $delay;
      else
        fail "the command has failed after $n attempts."
      fi
    }
  done
}

label_for_cycling() {
  local role=$1
  local nodes=$(retry kubectl --context=${kube_context} get nodes -l role=${role} -o json | jq -r '.items[].metadata.name')
  echo "${kube_context}: nodes=$(echo "${nodes}" | wc -l) role=${role}"
  echo "labelling for retirement: role=${role}"
  for node in ${nodes}; do
    retry kubectl --context=${kube_context} label node ${node} retiring=${retire_time} --overwrite=true
    retry kubectl --context=${kube_context} cordon ${node}
  done
}

delete_pods() {
  local node=$1

  retry kubectl --context=${kube_context} get pod --all-namespaces \
    -o jsonpath='{range .items[?(.spec.nodeName=="'${node}'")]}{@.metadata.namespace} {.metadata.name} {end}' |\
    xargs -n2 |\
    xargs -I % sh -c "kubectl --context=${kube_context} delete pods -n=%"
}

kill_node() {
  local node=$1

  set +e
  time timeout ${timeout} kubectl --context=${kube_context} drain ${node} --ignore-daemonsets --force --delete-local-data
  local rc=$?
  set -e
  if [[ ${rc} -eq 0 ]]; then
    echo "drained successfully"
  elif [[ ${rc} -eq 124 ]]; then
    echo "timeout reached, continuing: timeout=${timeout}"
    delete_pods ${node}
  else
    echo "kubectl drain exit error: ${rc}"
    delete_pods ${node}
  fi

  local instance_id=$(retry aws ${aws_opts} --output=json ec2 describe-instances --filters "Name=network-interface.private-dns-name,Values=${node}" |\
    jq -r '.Reservations[].Instances[].InstanceId')
  echo "aws terminating: node=${node} instance-id=${instance_id}"
  retry aws ${aws_opts} ec2 terminate-instances --instance-ids=${instance_id}
}

cycle_nodes() {
  local role=$1

  # - double ASG size
  local instance_address=$(retry kubectl --context=${kube_context} get nodes -l role=${role},retiring=${retire_time} -o json | jq -r '.items[0].metadata.name')
  local instance_id=$(retry aws ${aws_opts} --output=json ec2 describe-instances --filters "Name=network-interface.private-dns-name,Values=${instance_address}" |\
    jq -r '.Reservations[].Instances[].InstanceId')
  local asg_name=$(retry aws ${aws_opts} --output=json autoscaling describe-auto-scaling-groups |\
    jq -r '."AutoScalingGroups"[] | select(."Instances"[]."InstanceId"=="'${instance_id}'") | ."AutoScalingGroupName"')
  local asg_count=$(retry aws ${aws_opts} --output=json autoscaling describe-auto-scaling-groups |\
    jq -r '."AutoScalingGroups"[] | select(."Instances"[]."InstanceId"=="'${instance_id}'") | ."DesiredCapacity"')

  retry aws ${aws_opts} --output=json autoscaling update-auto-scaling-group \
    --auto-scaling-group-name "${asg_name}" \
    --desired-capacity $(( ${asg_count} * 2)) \
    --max-size $(( ${asg_count} * 2))

  # - wait for 2x group
  local count=0
  while [[ ${count} -lt ${asg_count} ]]; do
    sleep 32
    count=$(retry kubectl --context=${kube_context} get node -lrole=${role} -Lrole,retiring |\
      grep -v ${retire_time} |\
      grep -v NotReady |\
      tail -n +2 |\
      wc -l)
    echo "waiting for new nodes: actual=${count} expected=${asg_count} asg=\"${asg_name}\""
  done

  # - stop ASG actions
  ## auto-scaling processes:
  # https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html#process-types
  #
  # - Launch
  # - Terminate         # Do not suspend
  # - HealthCheck       # Do not suspend
  # - ReplaceUnhealthy
  # - AZRebalance
  # - AlarmNotification
  # - ScheduledActions
  # - AddToLoadBalancer
  #
  # Suspends processes on the autoscaling group. As we drain and terminate
  # instances we don't want the ASG to spin up new ones as a replacement or to get
  # back to the desired capacity.
  #
  # We do however want the ASG to detect that we are terminating instances so
  # we want ASG to check the health of the instance and "Terminate" (remove from
  # the group)
  retry aws ${aws_opts} --output=json autoscaling suspend-processes \
    --auto-scaling-group-name "${asg_name}" --scaling-processes \
    "Launch" \
    "ReplaceUnhealthy" \
    "AZRebalance" \
    "AlarmNotification" \
    "ScheduledActions" \
    "AddToLoadBalancer"

  # - drain/terminate labelled nodes (sequentially)
  local old_nodes=$(retry kubectl --context="${kube_context}" get nodes -l role="${role}",retiring="${retire_time}" -o json | jq -r '.items[].metadata.name')
  for old_node in ${old_nodes}; do
    kill_node ${old_node}
  done

  # - resize ASG to original size
  retry aws ${aws_opts} --output=json autoscaling update-auto-scaling-group \
    --auto-scaling-group-name "${asg_name}" --desired-capacity ${asg_count} \
    --max-size ${asg_count}

  # sleep some time to allow ASG to catch and see the "Terminating" instance
  sleep 64

  # wait for ASG to catch up and have the desired number of instances
  set +e
  local ic=0
  while [[ ${ic} -ne ${asg_count} ]]; do
    sleep 32
    ic=$(retry aws ${aws_opts} --output=json autoscaling describe-auto-scaling-groups \
      --auto-scaling-group-names "${asg_name}" |\
      jq -r -e '."AutoScalingGroups"[0]."Instances" | length')
    echo "waiting ASG to scale down: actual=${ic} desired=${asg_count} asg=\"${asg_name}\""
  done
  set -e

  # - re-enable ASG actions
  retry aws ${aws_opts} --output=json autoscaling resume-processes \
    --auto-scaling-group-name "${asg_name}" --scaling-processes \
    "Launch" \
    "ReplaceUnhealthy" \
    "AZRebalance" \
    "AlarmNotification" \
    "ScheduledActions" \
    "AddToLoadBalancer"
}

update() {
  local role=$1
  label_for_cycling ${role}
  cycle_nodes ${role}
}

resume() {
  local old_nodes=$(retry kubectl --context="${kube_context}" get nodes -l role="${role}",retiring="${resume}" -o json | jq -r '.items[].metadata.name')
  for old_node in ${old_nodes}; do
    kill_node ${old_node}
  done
}

echo "kube cluster: ${kube_context}"

if [[ -n "${resume}" ]]; then
  resume
  exit 0
fi

if [[ -n "${role}" ]]; then
  update ${role}
else
  update master
  update worker
fi

echo "run: result=\"success\""
